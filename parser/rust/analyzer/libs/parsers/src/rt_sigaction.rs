// generated by o3-high-mini
use wrappers::parsers::Parsable;
use serde::{Deserialize, Serialize};
use std::rc::Rc;
use std::any::Any;

#[derive(Default, Debug, Deserialize, Serialize)]
pub struct RtSigactionAttrs {
    pub signum: i32,
    pub act: String,
    pub oldact: String,
    pub sigsetsize: usize,
    pub ret: i32,
}

#[typetag::serde]
impl Parsable for RtSigactionAttrs {
    fn parse(args: &str, result: Option<&str>) -> Result<Self, String> {
        let mut attrs = RtSigactionAttrs::default();
        let parts: Vec<&str> = args.split(',').map(|s| s.trim()).collect();
        if parts.len() < 4 {
            return Err("Invalid arguments for rt_sigaction".into());
        }
        attrs.signum = parts[0].parse().map_err(|e| format!("Failed to parse signum: {}", e))?;
        attrs.act = parts[1].to_string();
        attrs.oldact = parts[2].to_string();
        attrs.sigsetsize = parts[3].parse().map_err(|e| format!("Failed to parse sigsetsize: {}", e))?;
        if let Some(r) = result {
            attrs.ret = r.trim().parse().unwrap_or(0);
        }
        Ok(attrs)
    }
    
    fn as_any(self: Rc<Self>) -> Rc<dyn Any> {
        self
    }
}
