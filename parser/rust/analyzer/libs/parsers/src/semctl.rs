// generated by o3-high-mini
use wrappers::parsers::Parsable;
use serde::{Deserialize, Serialize};
use std::rc::Rc;
use std::any::Any;

#[derive(Default, Debug, Deserialize, Serialize)]
pub struct SemctlAttrs {
    pub semid: i32,
    pub semnum: i32,
    pub cmd: String,
    pub arg: Option<String>,
    pub ret: i32,
}

#[typetag::serde]
impl Parsable for SemctlAttrs {
    fn parse(args: &str, result: Option<&str>) -> Result<Self, String> {
        let mut attrs = SemctlAttrs::default();
        let parts: Vec<&str> = args.split(',').map(|s| s.trim()).collect();
        if parts.len() < 3 {
            return Err("Invalid arguments for semctl".into());
        }
        attrs.semid = parts[0].parse().map_err(|e| format!("Failed to parse semid: {}", e))?;
        attrs.semnum = parts[1].parse().map_err(|e| format!("Failed to parse semnum: {}", e))?;
        attrs.cmd = parts[2].to_string();
        if parts.len() > 3 {
            attrs.arg = Some(parts[3].to_string());
        }
        if let Some(r) = result {
            attrs.ret = r.trim().parse().unwrap_or(0);
        }
        Ok(attrs)
    }
    
    fn as_any(self: Rc<Self>) -> Rc<dyn Any> {
        self
    }
}
