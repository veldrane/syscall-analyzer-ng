use std::collections::HashMap;

use registry::registry::Register;
use parsers::{mmap, munmap, openat, socket, accept, listen, fcntl, pread64, sendto, clone, close, sendmsg, epoll_create};
use wrappers::parsers::parser_wrapper;
pub fn init_registry() -> HashMap<String, Register> {
    
    return HashMap::from([
        ("mmap".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<mmap::MmapArguments>),
        }),
        ("munmap".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<munmap::MunmapArguments>), 
        }),
        ("openat".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<openat::OpenatArguments>),
        }),
        ("socket".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<socket::SocketArgs>), 
        }),
        ("accept".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<accept::AcceptArgs>), 
        }),
        ("accept4".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<accept::AcceptArgs>), 
        }),
        ("connect".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<accept::AcceptArgs>),
        }),
        ("bind".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<accept::AcceptArgs>),
        }),
        ("listen".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<listen::ListenArgs>),
        }),
        ("fcntl".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<fcntl::FcntlArgs>),
        }),
        ("pread64".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<pread64::ReadArgs>),
        }),
        ("sendto".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<sendto::SendtoArgs>), 
        }),
        ("recvfrom".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<sendto::SendtoArgs>), 
        }),
        ("clone".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<clone::CloneArgs>),
        }),
        ("close".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<close::CloseArgs>),
        }),
        ("sendmsg".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<sendmsg::SendmsgArgs>),
        }),
        ("recvmsg".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<sendmsg::SendmsgArgs>), 
        }),
        ("epoll_create".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<epoll_create::EpollCreateArgs>),
        }),
        ("epoll_create1".to_string(), 
            Register { 
                attributes: Box::new(parser_wrapper::<epoll_create::EpollCreateArgs>),
        })
    ]);
}
